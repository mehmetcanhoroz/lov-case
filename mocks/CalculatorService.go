// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// CalculatorService is an autogenerated mock type for the CalculatorService type
type CalculatorService struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0, _a1
func (_m *CalculatorService) Add(_a0 float32, _a1 float32) (float32, error) {
	ret := _m.Called(_a0, _a1)

	var r0 float32
	if rf, ok := ret.Get(0).(func(float32, float32) float32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float32, float32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Div provides a mock function with given fields: _a0, _a1
func (_m *CalculatorService) Div(_a0 float32, _a1 float32) (float32, error) {
	ret := _m.Called(_a0, _a1)

	var r0 float32
	if rf, ok := ret.Get(0).(func(float32, float32) float32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float32, float32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Multi provides a mock function with given fields: _a0, _a1
func (_m *CalculatorService) Multi(_a0 float32, _a1 float32) (float32, error) {
	ret := _m.Called(_a0, _a1)

	var r0 float32
	if rf, ok := ret.Get(0).(func(float32, float32) float32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float32, float32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Sub provides a mock function with given fields: _a0, _a1
func (_m *CalculatorService) Sub(_a0 float32, _a1 float32) (float32, error) {
	ret := _m.Called(_a0, _a1)

	var r0 float32
	if rf, ok := ret.Get(0).(func(float32, float32) float32); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(float32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float32, float32) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCalculatorService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCalculatorService creates a new instance of CalculatorService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCalculatorService(t mockConstructorTestingTNewCalculatorService) *CalculatorService {
	mock := &CalculatorService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
